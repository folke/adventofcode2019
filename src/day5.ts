export {}

function param(program: number[], programIdx: number, paramIdx: number) {
    const modes = program[programIdx]
        .toString()
        .slice(0, -2)
        .split('')
        .map(x => parseInt(x, 10))
        .reverse()
    const mode = modes[paramIdx - 1] || 0
    switch (mode) {
        case 0:
            return program[program[programIdx + paramIdx]]
            break
        case 1:
            return program[programIdx + paramIdx]
            break
        default:
            throw `Unknown op mode ${mode}`
            break
    }
}

function intCode(program: number[], input = 0) {
    let halt = false
    let skip = 4
    for (let i = 0; i < program.length; i += skip) {
        const opcode = program[i]
        const op = parseInt(`${opcode}`.slice(-2))
        switch (op) {
            case 99:
                halt = true
                break
            case 1:
                program[program[i + 3]] = param(program, i, 1) + param(program, i, 2)
                skip = 4
                break
            case 2:
                program[program[i + 3]] = param(program, i, 1) * param(program, i, 2)
                skip = 4
                break
            case 3:
                program[program[i + 1]] = input
                skip = 2
                break
            case 4:
                console.log(param(program, i, 1))
                skip = 2
                break
            case 5:
                if (param(program, i, 1) != 0) {
                    i = param(program, i, 2)
                    skip = 0
                } else skip = 3
                break
            case 6:
                if (param(program, i, 1) == 0) {
                    i = param(program, i, 2)
                    skip = 0
                } else skip = 3
                break
            case 7:
                program[program[i + 3]] = param(program, i, 1) < param(program, i, 2) ? 1 : 0
                skip = 4
                break
            case 8:
                program[program[i + 3]] = param(program, i, 1) == param(program, i, 2) ? 1 : 0
                skip = 4
                break
            default:
                throw `Unknown op code ${op}`
                break
        }
        if (halt) break
    }
    return program[0]
}

const code =
    '3,225,1,225,6,6,1100,1,238,225,104,0,1101,69,55,225,1001,144,76,224,101,-139,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1102,60,49,225,1102,51,78,225,1101,82,33,224,1001,224,-115,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,1102,69,5,225,2,39,13,224,1001,224,-4140,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,101,42,44,224,101,-120,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1102,68,49,224,101,-3332,224,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1101,50,27,225,1102,5,63,225,1002,139,75,224,1001,224,-3750,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,102,79,213,224,1001,224,-2844,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1,217,69,224,1001,224,-95,224,4,224,102,8,223,223,1001,224,5,224,1,223,224,223,1102,36,37,225,1101,26,16,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,677,677,224,102,2,223,223,1006,224,329,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,344,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,359,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,374,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,389,1001,223,1,223,1008,677,226,224,1002,223,2,223,1005,224,404,1001,223,1,223,7,677,226,224,102,2,223,223,1005,224,419,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,434,1001,223,1,223,108,226,226,224,102,2,223,223,1006,224,449,1001,223,1,223,108,677,677,224,102,2,223,223,1006,224,464,1001,223,1,223,107,226,677,224,1002,223,2,223,1005,224,479,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,494,1001,223,1,223,107,677,677,224,1002,223,2,223,1006,224,509,101,1,223,223,7,677,677,224,102,2,223,223,1006,224,524,1001,223,1,223,1007,226,677,224,1002,223,2,223,1005,224,539,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,554,101,1,223,223,8,677,677,224,102,2,223,223,1005,224,569,101,1,223,223,7,226,677,224,102,2,223,223,1006,224,584,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,599,1001,223,1,223,1107,677,226,224,1002,223,2,223,1006,224,614,1001,223,1,223,1108,677,226,224,1002,223,2,223,1005,224,629,1001,223,1,223,1007,677,677,224,102,2,223,223,1006,224,644,1001,223,1,223,108,226,677,224,102,2,223,223,1005,224,659,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226'

// code = "3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9"
const program = code.split(',').map(x => parseInt(x, 10))

intCode(program, 5)
